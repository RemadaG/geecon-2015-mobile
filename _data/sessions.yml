-
  id: 165
  title: "Definition of done: Working software in production"
  description: "There is no business value with an unused product. Up until the point
when real users can start using the product the development is waste.
Waste is bad.

Let me show you a case study how I minimised the waste of unused
software at one customer. We went from an error prone, manual
deployment process to a fully automated one. We cut the deployment
time from hours to minutes. About three minutes. We also reduced the
risk, and therefore the anxiety, with deployment from high to low.
Small changes are inherently less scary.

It was simple, but not easy. I will show you how it was done in this case.

Don’t settle for second best; go for perfection. Go for continuous
deployment!"
  language: ""
  speakers: [thosun]
-
  id: 166
  title: "Hot code is faster code - addressing JVM warm-up"
  description: "What is the JVM warm-up problem, and how does it affect our software? How can we aid the runtime in optimising our programs, and is it even a good idea to do so? This presentation explores the lifecycle of Java code, and how the JVM evolves the runtime representation of code during program execution. From bytecode to assembly and back again (via some uncommon traps), we will cover practical tips on ensuring that Java code is running fast when it matters most."
  language: ""
  speakers: [marpri]
-
  id: 169
  title: "How to bake reactive behavior into your Java EE application"
  description: "Reactive programming is already an established concept and there are many modern frameworks and tools which support it. You need to understand the concept in order to build truly reactive applications. But you do not need to switch from what you already know in order to build them. With standard Java EE you have wide range of options to add reactive behavior to new and even existing applications.

You will witness that Java EE is a modern and evolving framework and you’ll learn how it supports reactive concepts by many examples and live demonstration. The latest version of Java EE together with Java 8 add even more asynchronous API to write fully reactive applications. On top of asynchronous processing in servlets, REST services and EJBs, there is CompletableFuture with its promise-like API to tackle callback hell. Several Java EE implementations, like Payara Micro, go even further and provide extensions to scale your applications in a natural way."
  language: ""
  speakers: [ondmih]
-
  id: 172
  title: "Six years of Scala and Counting"
  description: "The Scala language and its environment have been evolving quite significantly over the past few years. The adoption of the language is slowly growing and it can now even be found in use in rather conservative enterprise settings. At the same time there have been quite a few criticism of the language, its ecosystem and its practicability in larger teams. Many developers are still avoiding to have a more serious look at Scala and its ecosystem for a variety of reasons ranging from the fear of good tooling support to the apprehension of advanced category theory principles. This talk is a reflection upon six years of working professionally with Scala in projects of various size and shape. It aims at conveying some of the learnings and practical insights gained during that time as well as to debunk some of the many preconceptions that surround the language and its ecosystem."
  language: ""
  speakers: [manber]
-
  id: 173
  title: "Clojure, clojure.spec, and Beyond"
  description: "Clojure.spec is an exciting, new core library for Clojure. It enables pragmatic specifications for functions and brings a new level of robustness to building software in Clojure. We’ll take a tour of the library and then take it one step further by exploring its abilities with genetic programming. Finally, we’ll take a step back and think about how clojure.spec lets programs describe themselves and what it might mean to AI."
  language: ""
  speakers: [carmei]
-
  id: 174
  title: "DROP DATABASE - galactic story"
  description: "So You thought databases might be useful. I will show You why this is ridiculous idea. Database is just the thing that kill performance of you system (100 times), destroys design and pollutes code. Besides it causes a great loss of information. Really, if you care about your data do not make a mistake and do not put them into Tables, JSONs or whatever. You can do it better. During the presentations you will see how to code systems NORMALLY and compare it to weird things such as Hibernate or JPA. You will learn that best place for your data is RAM !!! :-) And this all from the guy who was writing JEE systems with SQL (and not only) for the last 15 years. This guy (me) was even kind of evangelist for JEE, and introduced Hibernate and JPA in a few companies. (I am do sorry for that). And we will be talking about facts. Code is here: <a href='https://github.com/airomem/galakpizza'>https://github.com/airomem/galakpizza</a>"
  language: ""
  speakers: [jarrat]
-
  id: 178
  title: "6 tips for you JavaEE project be less depresing"
  description: "People are stuck to JavaEE not because they love it, but because it was in their work place, it is still there and will be there long after they leave. While many engineers think about going reactive, functional (or any other fashionable buzzword), some are still struggling how to migrate weblogic9 to weblogic12 and move from Java not supported for past 8 years (like Java 1.4) to the one not supported only just for a year (Java7).

While their live can be miserable - there are means for them to win JavaEE back, have fun again. It still won't be a super duper modern framework, it won't have all the latest pre-summer goodies, won't be a sweet language (full of syntactic sugar candies), but a solid set of tools that can make development pleasure again (kind of).

In the modern JavaEE you are no logger limited to the 'standard' but you can take advantage of limitless set tools and libraries. For some people it will still be the bad and ugly JavaEE, 'feels like Spring but n-years ago', 'Spring wannabe in the poor's man land' - that's true. But if you can't win Them (and let's be honest - in most enterprise'ish environments you can't win Them), join them! And have you JavaEE the way You like it.

This presentation will walk through multiple libraries that can help you change your project from 'This is The Standard Even If It Doesn't Fit' way to a something far more approachable, where your tools doesn't feel like the Maslow's Hammer. I'll be sharing some experience from multiple trainings, projects and refactorings of old-but-still-in-production JavaEE applications and tools we used to get away The Standard."
  language: ""
  speakers: [jakmar]
-
  id: 175
  title: "Java, JCP, Adopt-a-JSR & You - A Winning Combination"
  description: "Learn how to take part in Java technology evolution through the Java Community Process (JCP) program. You can participate as an individual, corporation, or nonprofit such as a Java user group (JUG). This session outlines why and how to participate in the JCP Program. You will also learn about the global Adoption programs and how you can participate in the programs. We will discuss details such as how to run hack days, collaborate with other JUG leads on Adopt-a-JSR activities, and review use cases from other JUGs around the world contributing to the Java EE 7 and Java SE 8 JSRs. Currently there are new JSRs being submitted and developed for the Java EE 8 and Java SE 9 platforms. Find out how you have contribute to the future editions of the Java Standard and Java Enterprise Editions."
  language: ""
  speakers: [heavan]
-
  id: 176
  title: "JVM dive for mere mortals"
  description: "For developers using Java on a daily basis, JVM is a pretty important component - it runs our software. But it is usually treated like a magic box, which takes code in and produces business features. Have you ever thought about what you are missing with such an approach? During my talk I'll cover some of the JVM internals which should not be avoided even during regular Java development. We'll discuss real differences between primitives and their wrappers, talk about the cost of using lambdas and streams, see what really gets erased in the type erasure process and what we can gain by removing stacktrace from our business exceptions."
  language: ""
  speakers: [jakkub]
-
  id: 177
  title: "Projectional Editing and Its Implications - JetBrains MPS"
  description: "Let’s shake some of the dogmas that constrain our programming worldview. In this session, I would like to take you to an alternative world - a world where programming languages are not parsed, a world where languages can be downloaded from the Internet and plugged easily into your IDE. A world where you have the power to customize the languages that you use.
You’ll see that projectional editing gives you incredible freedom in how you express your thoughts. It allows you to choose notations that best fit the task at hand. Your code can be edited as text, tables, diagrams, a form, or a combination of those. This is especially useful for Domain-specific languages and we’ll see real-life examples from domains such as the insurance industry, embedded software development, bioinformatics, enterprise systems and legislation. We’ll also discuss the downsides and integration challenges that projectional editors face.
My goal is that you’ll leave this session inspired, enriched and motivated to try something new."
  language: ""
  speakers: [vácpec]
-
  id: 179
  title: "Beyond lambdas - the aftermath"
  description: "As Java developers we are used to having rich ecosystems of libraries and tools that make our lives easier. As of the release of Java 8, we finally got our hands on building blocks like lambdas, optionals, and streams. All sorts of tools that help us write more concise code. But now, when the honeymoon is over, are there any downsides to Java 8 or is it a silver bullet? Are there any new anti-patterns emerging? Or subtle bugs caused by the new style of programming? Have there been any lessons learned? Are there any best practices?

If you are interested in learning about the challenges encountered when moving over to a functional style of Java programming, what code constructs to avoid, and best practices to use, well then this session is for you."
  language: ""
  speakers: [dansaw, dandeo]
-
  id: 180
  title: "Enterprise Java for the Cloud"
  description: "TBD"
  language: ""
  speakers: [dmikor]
-
  id: 181
  title: "Who’s Afraid of Graphs?"
  description: "Graphs are everywhere. Friended someone on Facebook? Graphs. Checked the best route to avoid traffic on Google Maps? Graphs. Those recruiters that keep spamming you with job offers on LinkedIn? They find you through graphs. We're surrounded by problems that can be best represented and solved through graphs, and yet graph databases and processing frameworks remain an obscure niche accessible mainly to data scientists and academics. It's time to right the injustice and bring graphs to the masses!
In this session you will learn about the various graph databases and data processing tools. You will hear about the types of problems that can be solved through graphs, what works best with graph databases, and what should be done with big data processing offline. You will see different ways of representing common use-cases in graph databases, various graph query languages, and learn about the advantages of migrating from relational databases with complex joins to graph databases. The talk includes demos of the various technologies, such as Neo4j, OrientDB, GraphX, Giraph, and others."
  language: ""
  speakers: [davost]
-
  id: 182
  title: "Hot Restart: reboot an In-memory Data Grid without losing data"
  description: "As RAM sizes reach into the terabyte range, modern application servers rely ever more on RAM caches for good performance, keeping almost all data in them. However, this makes the cost of application shutdown or crash much worse than just the downtime; it might take even days to gradually reconstruct the hot set in the caches.

This is where Hot Restart Persistence comes in: it backs up the data in purpose-built filesystem storage and efficiently reloads it on restart. I'll present the design used in Hazelcast, these are some highlights: log-structured storage; concurrent, incremental, generational garbage collection; pipelined multithreaded design of the reloading process; based on lock-free concurrent SPSC queues. On PCIe-attached SATA SSD the speeds achieved were 1.4 GB/s reloading throughput and 500,000 IOPS during regular operation (with 1 KB values). Fully synchronous persistence is also supported: concurrent operations are batched together so that the whole batch shares the cost of one fsync operation.

The presentation will include a live demo of Hot Restart Store with a visualization of the actions of the garbage collector."
  language: ""
  speakers: [martop]
-
  id: 183
  title: "New Java literals for the Brave and True"
  description: "Do you think you know your Java inside out? You know nothing, Jon Snow. I will show you that since Java 8 it's already possible to have nice and readable 'literals' not only for map or JSON but even HTML. You are just not brave enough to use them and maybe that's a good thing."
  language: ""
  speakers: [lukkře]
-
  id: 184
  title: "Java Annotations Are a Big Mistake"
  description: "Annotations were introduced in Java 5, and we all got excited. Such a great instrument to make code shorter! No more Hibernate/Spring XML configuration files! Just annotations, right there in the code where we need them. No more marker interfaces, just a runtime-retained reflection-discoverable annotation! I was excited too. Moreover, I've made a few open source libraries which use annotations heavily. Take jcabi-aspects, for example. However, I'm not excited any more. Moreover, I believe that annotations are a big mistake in Java design."
  language: ""
  speakers: [yegbug]
-
  id: 185
  title: "Become a Polyglot by learning Java!"
  description: "In a world running at breakneck speed to embrace JavaScript, it is refreshing to see a project that embraces Java to provides solution that deal with the new world and even improve it. I describe Truffle, a project that aim to build multi-language, multi-tenant, multi-threaded, multi-node, multi-tooling and multi-system environment on top of Java virtual machine with the goal to form the fastest and most flexible execution environment on the planet! Learn about Truffle and its Java API to become real polyglot, use the best language for a task and never ask again: Do I really have to use that crummy language? Jaroslav Tulach is the founder and initial architect of NetBeans, which is not just a well known IDE, but also the first modular desktop application framework written in Java. I have seen, made and helped to recover from many API design mistakes. Such experiences forced me to write a book titled “Practical API Design”. These days I am helping OracleLabs to design the API of Truffle which is the fastest virtual machine on the planet."
  language: ""
  speakers: [jartul]
-
  id: 186
  title: "Doing data science with Clojure: the ugly, the sad, the joyful"
  description: "Having programmers do data science is terrible, if only everyone else were not even worse. The problem is of course tools. We seem to have settled on either: a bunch of disparate libraries thrown into a more or less agnostic IDE, or some point-and-click wonder which no matter how glossy, never seems to truly fit our domain once we get down to it. The dual lisp tradition of grow-your-own-language and grow-your-own-editor gives me hope there is a third way.
This presentation is a meditation on how I approach data problems with Clojure, what I believe the process of doing data science should look like and the tools needed to get there. Some already exists (or can at least be bodged together); others can be made with relative ease (and we are already working on some of these); but a few will take a lot more hammock time."
  language: ""
  speakers: [simbel]
-
  id: 187
  title: "Big Data 101, all the foundations you need to bootstrap a new project in 2016"
  description: "BigData is quite trendy and now you're in a new project with Spark/Cassandra/Hadoop/<whatever_bleeding_edge_technology> to build the DataLake/<yet_another_wannabee_keyword> of the 21st century. To have a good start with the new world and all its concepts you'll need some foundational knowledge: - the CAP theorem, or 'pick 2 out of 3, no free lunch' - master/slave, multi-master and masterless architecture, advantages and drawbacks - can I distribute my computation ? Or how 'not to be confused by marketing bullshit around big data'"
  language: ""
  speakers: [duydoa]
-
  id: 189
  title: "Geospatial Graphs made easy with OrientDB"
  description: "Modeling and querying persistent data structures can be tricky when they involve semi-structured data, complex relationships (with deep traversal) and physical information like geographical positions, areas, shapes and so on. Bad news is that almost all your applications will have to manage such kind of data. In this presentation you will see how to use OrientDB v2.2 Document-Graph engine and its new Geospatial Indexes to efficiently manage and query connected, spatial information. Very few slides, a lot of live coding, I promise!"
  language: ""
  speakers: [luidel]
-
 id: 901
 title: "Registration & breakfast"
 service: true
-
 id: 902
 title: "Breakfast"
 service: true
-
 id: 904
 title: "Break"
 service: true
 description: "The best time to take coffee or juice"
-
 id: 905
 title: "Coffee Break"
 service: true
 description: "The best time to talk with speakers and attendees"
-
 id: 906
 title: "Lunch Break"
 service: true
-
 id: 907
 title: "Keynote"
  description: "Keynote"
  language: ""
-
 id: 909
 title: "Opening ceremony"
 language: ""
-
 id: 910
 title: "TBA"
 description: "To Be Announced"
 language: ""
-
  id: 476
  title: "On-stage hacking: build 12-factor microservices"
  description: "Planning to build microservices? The best practice of building a first-class microservice is to follow 12-Factor app. But how to fulfill the 12-factor app rules, e.g. how to achieve externalise the configuration, fault tolerance, etc? Come to this session to build a 12-factor microservice using MicroProfile programming mode with live code demo."
  language: ""
  speakers: [emijia]
-
  id: 477
  title: "Purely Functional Data Structures"
  description: "Design of a performant immutable data structures is a challenge that was accepted by Chris Okasaki over 20 years ago. In this talk, we’ll explore what the concept of Functional Data Structures is, how are they implemented, and their trade-offs are."
  language: ""
  speakers: [grzpiw]
-
  id: 478
  title: "Rediscovering gRPC with Kotlin coroutines"
  description: "Microservice architecture is now a huge trend. All big organizations with millions of users are doing microservices. This means they have lots of channels of communication between services and need to send and get much data. At some point, you can find yourself in a situation where your current approach doesn’t provide you with efficient communications, you pay more, wait for more, lose more etc. Maybe it’s time to look at gRPC… gRPC is asynchronous by its nature. But old api, java infrastructure, and verbosity make people write lots of noise and break their beautiful minds to make things done. In Kotlin we have awesome coroutines concept. So async gRPC and coroutines could be a perfect match! Let’s discover if this is possible. In this talk, we’ll learn how to build microservices using gRPC with minimum pain. We’ ll discuss the pros and cons of this approach, what can be improved, what should be added. In this talk we'll cover some basics of gRPC, and it's usage in jvm. We'll look at java old-fashioned style and then switch to a modern and lovely Kotlin style."
  language: ""
  speakers: [marned]
-
  id: 479
  title: "Chaos Development: Removing software as the inhibitor of Agile"
  description: "You’re starting a new project. You’re using real Agile (finally!). Kickoffs, initial stories, tool selection… the atmosphere is electric. That first iteration is complete; yes, a few kinks, but we’re rolling now. A couple of more iterations flow by before the euphemism “technical debt” is heard. The next couple of iterations are a bit of a struggle. Finally, it looks like the goals may not be achievable. Programmers mumble about faulty designs and changing requirements. Business owners roll their eyes, thinking, “Here we go again…”. What happened? Practical Agile practices were followed, but were mated with very traditional, inflexible programming styles. Agile development centers around accommodating change. Stories can be played in business-friendly order. Unanticipated changes can and should be accepted with aplomb. Therefore the design and implementation of the software must also accommodate the uncertain. Chaos engineering is the vogue term used to describe the design of systems that handle the unexpected. Similarly, software development must accommodate unexpected demands. It needs to focus on chaos development. In this presentation, we will suggest two distinct approaches to chaos development. The first exploits existing OO languages, but employs a particular style of programming, and can be used for most business problems. The second uses an event bus and highly decoupled services, a technique called asynchronous MicroServices, and is appropriate for addressing fuzzy problems. For the first style, we will delve into the aspects of the style, particularly its focus on small, tight classes; extensive exploitation of design patterns; and careful monitoring of complexity metrics. For the second style, we will briefly address the principles at work, and show a brief animation of the type of problem nicely handled by asynchronous MicroServices."
  language: ""
  speakers: [fregeo]
-
  id: 483
  title: "Scaling your Architecture with Services and Events"
  description: "This session is a deep dive into the modern best practices around asynchronous decoupling, resilience, and scalability that allow us to implement a large-scale software system from the building blocks of events and services, based on the speaker's experiences implementing such systems at Google, eBay, and other high-performing technology organizations. 

We will outline the various options for handling event delivery and event ordering in a distributed system. We will cover data and persistence in an event-driven architecture. Finally, we will describe how to combine events, services, and so-called 'serverless' functions into a powerful overall architecture. 

You will leave with practical suggestions to help you accelerate your development velocity and drive business results."
  language: ""
  speakers: [ransho]
-
  id: 484
  title: "Messages on the Outside, Messages on the Inside"
  description: "In the classic paper `Data on the Outside versus Data on the Inside` Pat Helland argued that data within a service boundary should be treated differently than data residing outside of it. Here, I shall argue that the same applies to messages. Inside a service boundary messages are tightly coupled to the corresponding data manipulations. Sometimes it is even possible to enforce total order of messages. The moment the message crosses the service boundary, it enters the no man's land where bad things happen. Messages get reordered, duplicated or even lost. Join me in this talk to learn about some patterns you can use to get your messages safely to the other side."
  language: ""
  speakers: [szypob]
-
  id: 485
  title: "Habits of efficient developers"
  description: "Even if a 10x developer may be a myth, we all know of some developer that just shines and is able to do more in less time, and seems to do it without effort! Even if may seem that you need some kind of special natural talent, it is not. Come to this session to learn what you need to learn to become a more efficient developer."
  language: ""
  speakers: [danleb]
-
  id: 486
  title: "From annotations to code: describing HTTP endpoints with Tapir"
  description: "Most of the popular Java frameworks are annotation driven. But while annotations have been a great tool, today we are no longer constrained by what's possible in Java 5. Functional programming has been re-discovered, and the JVM has a rich ecosystem of languages. In the talk we'll first review some of the problems of annotations. However, most of the time will be dedicated to a **live-coding** case study, replacing HTTP endpoint mapping annotations with Scala code, using the [Tapir](https://github.com/softwaremill/tapir) library. Separating the descriptions of mappings or side-effects, from the interpretation, using 'regular' programming language constructs is a powerful tool: we have all the flexibility of the base language at our disposal. But, let the code from this talk speak for itself!"
  language: ""
  speakers: [adawar]
-
  id: 487
  title: "Event-Driven Architecture Traps"
  description: "Event-driven architectures (EDA) have become more popular by the day. Organizations see a great value in them, and developers love how EDA help to grow, scale, and mirror what really happens in the business domain. However, most developers are not familiar with this kind of architecture, which can lead to common pitfalls that we’ll examine in this talk. We’ll also cover a broad set of concepts like: Spring Cloud Stream, exactly-once delivery (is that event a thing?), GDPR, CQRS, and tackle the problem of how to version our events. There will be code and the presentation requires basic knowledge about distributed systems."
  language: ""
  speakers: [jakpil]
-
  id: 488
  title: "Secrets of top performance in Java revealed"
  description: "What are the key factors of the performance of your Java code? First one is related to constructs and libraries used in your implementation. Are your constructs result in simple or complex bytecode? What complexities are added by used features and libraries? We will examine the performance and complexity of several implementations of the same task using different features of the Java language and the standard library. Next performance factors are related to compilers used to transform your bytecode into machine code and to perform optimizations. How can you achieve the best performance at runtime? Do you need it just from the beginning or can you accept some warm-up time? We will do a benchmark of startup and peak performance of one solution, using different just-in-time and ahead-of-time compilers available in Java. We will also discover an answer to a fundamental question: can solution implemented in Java be as performant as an equivalent one in C++ ? After this session, your code should never be slow again!"
  language: ""
  speakers: [jonkaz]
-
  id: 491
  title: "Busy Architect’s Guide to the Cloud Offerings"
  description: "When 'the cloud' became a development watchword, several players immediately moved in to occupy the space. And then a few more, and then a few more, and then.... Well, pardon the pun, but the clouds burst open, and everybody suddenly seems to have a cloud offering these days. Going by various different names (like Infrastructure-as-a-Service or Backend-as-a-Service or Platform-as-a-Service or...) and offering different options, it's hard to figure out which of these are interesting and which are yesterday's news and which are too futuristic to be of use today. In this presentation, we'll take a look at the clouds, read them like a weatherman, understand which are useful and why, and get a better look at a few as a concrete example. Amazon Web Services, Azure, and Google Cloud Platform are three of the big ones, but there's a few more players out there that might surprise you and get you to stand up and take notice."
  language: ""
  speakers: [tednew]
-
  id: 492
  title: "Reactive Spring"
  description: "Spring 5 is almost here! One of the most exciting introductions in this release is support for reactive programming, building on the Pivotal Reactor project to support message-driven, elastic, resilient and responsive services. Spring 5 integrates an MVC-like component model adapted to support reactive processing and a new type of web endpoint, functional reactive endpoints. In this talk, we'll look at the net-new Netty-based web runtime, how existing Servlet code can run on the new world, and how to integrate it with existing Spring-stack technologies."
  language: ""
  speakers: [joslon]
-
  id: 494
  title: "Reactive Integration with Akka Streams and Alpakka"
  description: "An alpaca is like a camel, but is Alpakka like Apache Camel? Can we use the reactive approach in the area of integration as well, instead of the blocking approach that Camel usually offers? In this live coding session we’re going to explore the possibilities that Alpakka - a set of connectors for Akka Streams - offers to fetch data from various data sources and send it to different destinations. Using those, you’re going to learn, on a working example, how to build a reactive integration layer with the help of Akka Streams - one of the most popular Reactive Streams implementations. And if you thought Akka and friends were only for the Scala people, come to learn the nice Java APIs and see how wrong you were. 
<br><br>
Code: https://github.com/rucek/reactive-integration-with-akka-streams-and-alpakka 
<br><br>
Slides: https://www.slideshare.net/SoftwareMill/reactive-integration-with-akka-streams-and-alpakka"
  language: ""
  speakers: [jackun]
-
  id: 495
  title: "Machine Learning in Visual Search"
  description: "Unlike computers, humans process images easier and faster, than text. As users, we become less patient and expect technology to read our minds, and serve the right content. As developers, we have more and more opportunities to work with Machine Learning and Deep Learning. E-commerce companies recognised these trends quickly, introducing image recognition tools, because it brings higher conversion rate. Let’s take a deeper look at visual search: how and where it works, who is using it and how you can do it yourself."
  language: ""
  speakers: [olakun]
-
  id: 496
  title: "Jenkins Configuration as Code - Automate your automation Server"
  description: "Jenkins Configuration as Code (https://github.com/jenkinsci/configuration-as-code-plugin) is an open source Jenkins plugin that will allow users to keep complete Jenkins configuration in simple configuration file (yaml format). In the talk I'll briefly present the history behind the plugin, the vision for the future and current status. Then I'll move to demo section where I'll show how easy it is to configure and run Jenkins with the help of the plugin. I will end with short guide for open source enthusiast that would like to contribute to the plugin. The target audience for this talk are Jenkins daily users or administrators but also Java Developers - beginner level is enough - that would like to start to contribute to open source projects."
  language: ""
  speakers: [ewewil]
-
  id: 497
  title: "Machine data: how to handle it better?"
  description: "The rise of IoT and smart infrastructure has led to the generation of massive amounts of complex data. Traditional solutions struggle to cope with this shift, leading to a decrease in performance and an increase in cost. In this talk, we will take a look at this kind of data using a simulated Curiosity rover. Participants will learn how to create a data pipeline for ingestion and visualisation. By the end of this session, we will be able to set up a highly scalable data pipeline for complex time series data with real time query performance."
  language: ""
  speakers: [tanpan]
-
  id: 498
  title: "Consumer Driven Software Development"
  description: "Not another one of these * Driven Development, you say? This one is different, I promise! Writing good Software is difficult! It is mentally exhausting! Programmers need to make decisions all the time: Should I write a comment here? Does this function belong to another class? What should the test name be? In this talk I propose a mindset that let’s you make better, more reasonable decisions more easily. I’ll be using examples from daily development life situations that show the effectiveness of Consumer Driven Software Development and by itself are already worth applying. TL;DR: Write better software more easily with this easy trick! Software development coaches hate him!"
  language: ""
  speakers: [aikklo]
-
  id: 499
  title: "Automating your development experience with Atomist"
  description: "Developers don’t get paid to write code. Instead, we're expected to deliver working software in production. How does your team turn source code into running software? And how do you make sure it stays working in all environments, including production? Atomist expands the range of development automation past what most of us have currently seen. How quickly can we get from an idea to deployment? Well, give me ten minutes and a few button clicks. 'But my deployment process is unique!' No problem, we can solve this, in code, in TypeScript! How about having production or deploys through a single click? Build failed? Here’s a message in Slack with a detail on what wet wrong. Or how about autoformatting your code so that you'll never forget. Atomist like adding a team member who to do the stuff we wanted to automate ages ago. Let’s scale up ourselves, with Atomist."
  language: ""
  speakers: [liedoc]
-
  id: 500
  title: "Understanding Low Latency JVM GCs"
  description: "Since several years, the world of JVM GC evolved. A new kind of GC emerges: low latency GCs. Shenandoah is provided by Red Hat, Oracle open sourced ZGC in OpenJDK since JDK 11 and Azul C4 is sill there.​ As 'classical' GCs are well understood, this talk will focus on internals of the most recent ones. We will explain Concurrent Marking (tri-color marking), the C4's Load Value Barrier, Shenandoah's Brooks Pointers and ZGC's multi-mapping. Finally, how to choose a low latency GC?​"
  language: ""
  speakers: [jeabem]
-
  id: 501
  title: "Test && commit || revert"
  description: "Test and commit or revert (aka TCR) is the new workflow recently popularised by Kent Beck https://medium.com/@kentbeck_7670/test-commit-revert-870bbd756864 I'll explain what it is and why/how to use it (see https://github.com/dkandalov/limited-wip)."
  language: ""
  speakers: [dmikan]
-
  id: 502
  title: "Coroutines explained by example"
  description: "Coroutines have received quite a bit of attention recently from language designers with async/await in JavaScript 2017, Python 3.5 new syntax, Kotlin 1.1 coroutines support and project Loom for Java. This session explains how coroutines can help writing concurrent code without any threads, how yield/async/await work, how coroutines relate to continuations and how to escape callback hell. This talk explains coroutines using runnable code examples in Lua, JavaScript and Scheme and should help capture the essence beyond syntax. The lessons apply to other languages with coroutines such as C#, Kotlin, Python, etc. Target audience: software developers"
  language: ""
  speakers: [dmikan]
-
  id: 504
  title: "Reactive for the Impatient - A Gentle Intro to Reactive Java"
  description: "As Java is an object-oriented language that inherently supports the imperative programming style, asynchronicity presents a challenge that can turn the code into nightmare. One way to deal with the complexity of asynchronicity is to introduce reactivity onto the coding level (reactive programming), and/or to handle it on the design and architecture level (reactive systems design). This talk presents to the audience a few of the major Java-based reactive frameworks and toolkits in the market today, such as RxJava, Spring Reactor, Akka, and Vert,x. It will start by going over the basic tenets of reactive systems, and some examples of the problems that these systems aim to solve. It will discuss the 2 most commonly used Java frameworks for implementing reactive coding - RxJava and Spring Reactor, and will show some code samples. It will then bring the audience to the next level of 'reactivity' by introducing 2 reactive frameworks - Akka and Vert,x, which are usually used for implementing reactive microservices. It will draw some comparisons between these 2 frameworks and cite some real-life examples of their usages. The takeaways for the audience will be an understanding of the key differences between reactive programming versus reactive systems, and the strength and weaknesses of each of the surveyed frameworks."
  language: ""
  speakers: [margry]
-
  id: 505
  title: "Property-based testing: You won't look at your tests the same way ever again"
  description: "Property-based testing changes the way you think about your work. Instead of specifying assertions one by one, this new approach tests your code with streams of unexpected inputs and edge cases. Despite its potential, the technique still remains under the radar. Let’s uncover its strengths together! The talk will discuss how property-based testing compares to traditional testing methods and demonstrate its principles with simple examples. We will see how the method fits into a TDD workflow, a CI/CD pipeline, and a modern JVM testing toolchain. In order to bust the myth of the inapplicability of property-based testing in a real-world setting we’ll bring up some use cases from industry. Finally, we’ll wander into the world of concurrency and the automation of race condition detection. I’ve worked with property-based testing for a number of years now. I’ve discussed the technique in talks at various European tech conferences and meetups, kindling some interesting discussions across the programming languages’ spectrum. I’d love to share my enthusiasm with GeeCON attendees and empower them with this fascinating approach."
  language: ""
  speakers: [janste]
-
  id: 507
  title: "Is writing performant code too expensive?"
  description: "While compute becomes faster and cheaper we are tempted to abandon sanity and shield ourselves from reality and laws of physics. The resulting mess of monstrous Slack instances rampaging across our RAM should makes us stop (because our computers did it already) and wonder where did we go wrong? Rising developer salaries and time to market pace are tempting us to abandon all hope for optimising our code and understanding our systems. Contrary to what casual reader could think this is a deeply technical presentation. We will gaze into hardware counters, NUMA nodes, vector registers and that darkness will stare back at us. All this to get a taste of what is possible on current hardware, to learn the COST of scalability and forever change how you feel when accessing invoice list in your local utilities provider UI so that after 20s of waiting all 12 elements will be displayed (surely Cthulhu must be eating their compute because it is NOT possible Tauron hosts it’s billing services on FIRST GEN IPHONE). 
Key takeaways: 
<li> Software (esp. backend) is only a small part of a successful product. 
</li><li> Many successful companies strive to validate features early which leaves little time for good engineering and performance work
</li><li> There are, however cases when optimization can provide 10-100x speed up which brings tremendous value to products and clients 
</li><li> To identify such opportunities we need to have good intuition about what hardware and proper algorithms can do 
</li><li> Memory bandwidth per core for AMD EPYC and Intel Xeon systems 
</li><li> How branch predictor affects performance and how to work around it
</li><li> Memory access patterns impact on performance and how to invert them
</li>
"
  language: ""
  speakers: [tomkow]
-
  id: 509
  title: "Forget Go. Go, Java, go!"
  description: "GraalVM's Substrate VM is a framework for ahead-of-time compilation of Java applications and smooth interaction with C-like data structures. It brings together the benefits of Java language with behavior of native programs. It offers smooth C-interop API for accessing and calling native OS functionality. The above combined with automatic memory management of Java objects make it a perfect fit for writing reliable, fast startup, low memory consumption applications. Let's see how easy it is to convert your Java applications to native! Let's explore how to use such binaries in the cloud containers. Let's investigate the C-interop API. Let's find out how to use Java where low level languages like C or Go were needed. Let's make Java a Universal language!"
  language: ""
  speakers: [jartul]
-
  id: 510
  title: "9 ways to test your spaghetti code"
  description: "“Test the legacy code as well” has been a mantra for many years now. But how do you actually do that? When stuck with tangled legacy-spaghetti, it may be hard to see the way out. The path from struggling with your spaghetti into doing TDD is shorter than you think. It's so easy to say that you should test code as you change it, now matter how legacy, but in a real-world project, you need to know some tools and techniques to be able to do that. This talk will give you concrete techniques, along with a way of thinking to figure out those tricks you need in your code base. I came into a project where writing tests was considered really hard and time consuming, and TDD was “impossible”. I did it anyway, and I want to share what we did and what we've learned from it."
  language: ""
  speakers: [madoph]
-
  id: 511
  title: "MADPIG: Measure and deepen performance in Go"
  description: "Do you care about speed? Do your users care about latency? When performance matters, theory and intuition are initially useful guides, but soon the rubber meets the road. Write benchmarks, try several approaches, optimize at different levels of abstraction, find the bottleneck, repeat! The Go tooling makes performance exploration approachable and exciting. Use Pprof to discover where the time is actually spent. It's often not where you think! Consider writing concurrent code, when the benefits exceed the costs. Use Trace to peek at your CPU cores: Why are they sometimes idle? Where do all these context switches come from? Is the GC responsible for my slowdown? Write good tests, to preserve semantics across incremental refactorings. Learn about the benchmarking idioms of the testing package. Run the Race detector, understand what it does and why it matters. Examine test code coverage to discover dead code and hot paths. What the hell is a Flame Graph? Factor in the trade-offs of memory allocation, regexps, maps, random numbers, I/O, stdlib. Also, consider when it is wise not to optimize!"
  language: ""
  speakers: [valdel]
-
  id: 512
  title: "The Slower the Stronger: A Story of Password Hash Migration"
  description: "Did you know that a single modern GPU is able to compute almost 20 billion MD5 hashes in a second? That’s why we need SLOW hashing algorithms! This talk is a case study of a successful migration of www.ocado.com customer password hashes. I will not only show you the “why”, “what” and “how”, but also what was problematic, what went wrong and how we dealt with it. I will talk about slow hashing algorithms - such as Argon2, PBKDF2, BCrypt or SCrypt - and compare them to other popular hashing algorithms - like MD5 or SHA1. Next, I will tell you a story of hashes which took about 80 ms to compute - not slow enough, fairly easy to crack. I will show you what our password hashing code looks like and I will guide you through our migration plan, describing in detail how we executed it, and what problems we encountered on the way."
  language: ""
  speakers: [tombor]
-
  id: 513
  title: "What Lies Beneath"
  description: "What really happens when your Java program runs? After the transformation from Java source through bytecode and machine code to microcode, and the various optimizations that take place along the way, the instructions that are actually executed may be very different from what you imagined when you wrote the program. This session shows you tools and techniques for tracing that path. You’ll see what a simple program actually looks like when it really hits the hardware."
  language: ""
  speakers: [maunaf]
-
  id: 514
  title: "Modern Web Testing: Going Beyond Selenium"
  description: "It is safe to say that Selenium WebDriver is the number one testing tool for many software engineers across the globe. However, as the tech world has been growing rapidly, so has the testing industry. More and more UI testing frameworks besides Selenium are gaining popularity. These new test frameworks are especially appealing to its users because of the promise to solve speed, maintenance, development and other concerns of WebDriver implementations. These new, non-Selenium frameworks emphasize Rapid Test Development practices, and it has been resonating with the development community. In this talk, we dive into test solutions evolved from Selenium like Protractor, and talk about non-Selenium frameworks like TestCafe and Cypress.io. We discuss why these new tools are gaining popularity and continue to disrupt the traditional testing standards of Selenium WebDriver. More importantly, we address how to get started and what mistakes to avoid when first implementing TestCafe or Cypress.io in your team."
  language: ""
  speakers: [dmivin]
-
  id: 515
  title: "Survivability of Observability: Taking your DIY system to success"
  description: "The goal of this talk is to provide the long view in making your DIY observability program a success. Far more programs get started than end up actually flourishing in the long term. A not-so-uncommon story: Initially, everyone loves your solution, your team receives extra headcount and budget, and you're busy evangelizing and training your organization on how to use it. But before you know it, the dreaded outages begin, all these new users start demanding more and more features, and overall satisfaction with the toolset starts to decline. You either limp along or start exploring commercial options. How did this happen? Based on firsthand experience growing DIY and commercial observability systems from scratch to supporting thousands of users plus hundreds of thousands of servers, we'll share some reasons and winning strategies. We'll also discuss the observability maturity curve, how and why requirements evolve, usability and integrations needed for a coherent toolset, monitoring-ops ('opservability'), and challenges that come with rapid growth."
  language: ""
  speakers: [janyu, arimuk]
-
  id: 517
  title: "Another year, another language"
  description: "No matter what language and which framework You use now, there is a big chance You will have to learn something new in a next few years. That is both a beauty and a curse of a coder job. But why does it work like that? Why can’t you simply learn one good enough technology and use it till retirement. Saving more time for family and hobbies. Or maybe You can? This talk is about evolution and history of software languages. Why don’t we write in FORTRAN anymore and who did not like ALGOL? Why functional programming is in fact older than assembly and how our mainstream (C++, Java and C#) looks like from a broader perspective. Can evolution end one day? Will there be the ultimate language, ever?"
  language: ""
  speakers: [jarrat]
-
  id: 518
  title: "Developer’s Torment: The Documentation"
  description: "You start a new job. You’re excited - new domain, new knowledge to ingest, new practices to learn. Unfortunately, once you start digging into things, excitement starts to fade and is replaced by frustration. It turns out that there is no way to find out about the product unless you somehow get a hold of sales pitch presentation. You can only learn about architecture if you talk to “that guy” and only if he’ll have 3 hours to spare (spoiler alert: he won’t). In short - tribal knowledge is the only way to go. It’s actually not the worst case scenario. Instead of missing documentation, more often than not you’ll stumble upon one that is simply out of date. Described build process always fails? Your fault, why wouldn’t you know about that one file with dependencies version you have to create manually after pulling the repo? Docs say we use Cassandra to store our data? Well, we did - in 2010. There is a different side to this - in some projects, on the other hand, you feel like the only thing you do is writing the docs. Many of those are probably out of date right now. Others, while helpful, will probably just be lost among the ones not helpful at all. How do you enjoy the fact that you’re creating a document that nobody will ever read? Is there no way out of this hell? Does onboarding process have to be the rite of passage, where your enthusiasm is crushed by the heavy weight of hopelessness? How to write and maintain documentation in the way, that it is an actual advantage to you and yours, and not a pile of shame? During our talk, we’ll analyze what are the actual issues with the docs, do we actually need it and how to go with quality, not quantity. Don’t worry, we won’t leave you without the tools to tackle this beast."
  language: ""
  speakers: [zbypap, jakmar]
-
  id: 519
  title: "Don’t be Homer Simpson with your Reactor!"
  description: "Project Reactor is a very powerful tool in the developers' hands. But, the more powerful tools you use, the stronger safety rules are. Do you know all of them? In this talk, we will learn about advanced Project Reactor debugging & testing techniques, which are helpful for anyone who works with Project Reactor. Because like the cockroaches can survive even the radiation, bugs can escape the most well-thought-out code. Never heard about BlockHound? Or you know about Backpressure, but not sure if it is handled correctly in your​ code? Maybe you want to prepare you reactive code upfront to help your future self when something goes wrong in prod? Or perhaps just watch how Reactor team members work with Reactor code and learn some neat tricks? Then this talk is for you!"
  language: ""
  speakers: [serego]
-
  id: 520
  title: "How do we approach event streaming at Revolut?"
  description: "Nowadays we all deal with distributed systems and coupling in some sense. In Revolut it is no different. In this talk Jacek Spolnik, Lead Platform Engineer will describe how we tackle those challenges and how do we make our platform more reactive - we have created our own solution to handle event streaming. This enables asynchronous loosely coupled architecture, and it allows us to build streaming queries based on domain language and have flexibility over providing new features - although all comes at a cost. Let me tell you the story of how we bring it up and what kind of challenges we face - and how do we approach solving them. Monitoring, data consistency, high availability, storage replication, guaranteed delivery - all of those topics merge into an interesting technical problem which always comes with the question - are benefits of delivering it higher than complexity it provides? Let's talk about that - how does it look at Revolut. Audience: expert"
  language: ""
  speakers: [jacspo]
-
  id: 521
  title: "Building a continuous secure delivery pipeline"
  description: "In today’s fast paced software development world, we have seen teams facing difficulties keeping up with security requirements. Regular security breach in news highlights how a simple security miss can result into big financial and reputation loss. To solve this problem, we tried to integrate security as an agile engineering practice, similar to pairing or TDD at ThoughtWorks. In this talk we will speak about challenges teams face to include security as a practice. We will share some of the lessons learned, tools and techniques to help teams build a continuous delivery pipeline which has security at its core. We will also talk about how a continuously evolving threat model helps team to bake security in the product instead of bloating on in later. After attending this talk, you will learn the shift in mindset required to have security at the core of delivery pipeline. You will also learn some tools and techniques to be included in your development and delivery workflow to help build security in. Finally, you will learn how having a continuously evolving threat-model can help mitigate security risks."
  language: ""
  speakers: [shipad]
-
  id: 522
  title: "\"Let me give you some feedback...\", a story about handling criticism, appreciating yourself and confidently asking for what you want"
  description: "Many of us have painful experiences of receiving criticism - be it earned or unearned. We are often overly critical of ourselves and others. We're also not that great at confidently ask for what we want. This talk will help current and future leaders build a strong set of skills for reducing stress, improving relationships and growing their careers."
  language: ""
  speakers: [micpar, zuzmro]
-
  id: 523
  title: "Real World Kafka Streams"
  description: "At a Dutch utility company we built a new system for the processing of millions of smart meter data requests. The system is built around a central Kafka bus and uses Spring Boot applications running Kafka Streams deployed in a Kubernetes environment. In this talk you will learn how to build scalable Kafka Streams applications and how to get them running in the cloud. You are introduced to the concepts of Kafka and streaming. You will get hands on tips and tricks to get started and how to avoid pitfalls from our journey from batch to streaming. We have been running a system with Kafka Streams in production successfully. I had a lot of fun building Kafka Streams applications, but there were some challenges to overcome. I would like to share what we have learned in the past year. The talk will contain the following: - an explanation about Kafka, how does it work, advantages, disadvantages. - introduction to Spring Kafka - introduction of Kafka Streams - example code of Kafka streams - lessons learned from our project"
  language: ""
  speakers: [jerres]
-
  id: 524
  title: "Do not put all eggs in one container"
  description: "Microservice architecture and containerization have become the standards of modern application development. The challenges that developers face today are different from the problems that we used to solve earlier. Creators of the Java runtime respond to this with the appropriate functionality in the JDK. For example, an inexpensive cloud instance can be quite powerful. And it runs a bunch of containers. Then JVMs running in different containers compete for instance resources. Starting from Java 10, virtual machines know how to live in peace, this work has continued in Java 11. On the other hand, you now need to choose which base image to use. This includes the choice of operating system and Java runtime. OS images vary greatly in size and have their own characteristics, which must be taken into account. Java runtime is also for every taste now. And even within the OpenJDK framework, assemblies from different companies are available with different functionality and size. And you can create a custom runtime image. We will consider the practical application of Java 11 functionality in a container environment typical for popular frameworks."
  language: ""
  speakers: [dmichu]
-
  id: 525
  title: "Apache Beam - what do I gain?"
  description: "The Dataflow model known from Google Cloud and Apache Flink offers an “approach shift” when dealing with data. We no longer treat Stream as a special case of Batch and try to fit it in finite chunks - we use a well-designed Unified Model to implement both Batch and Stream scenarios in a consistent manner. “But I want to use Spark so this is not for me...” Try Apache Beam. It also implements the Dataflow model but (and this is new) it abstracts from any data processing backend. What if you could use this Unified Model once and run it on a runner of your choice? “But we only do Python!” Have you tried Beam’s multiple sdks (Java, Python, Go, Scala)? Beam (once it gets there) will be portable on every runner with every sdk that a developer has used. Choose your language, write code once, run on any backend you want. Those are the goals the project aims to achieve. I’ll go through the basics of the Dataflow model. I’ll talk about Beam in more detail and familiarize you with the current state of the project. If there’s time, I’ll also try to briefly show the current most important efforts in the project (such as portability)."
  language: ""
  speakers: [lukgaj]
-
  id: 526
  title: "The Java Module System in practice"
  description: "Java 9 introduced modules as first-class citizens that represents a higher level of aggregation above packages. They allow you to implement more robust software systems by providing stability, cohesiveness, encapsulation, and isolation. Modularizing a 'Hello world' application is pretty straightforward, but it provides only limited benefits. That's because the primary strength of modularization lies in its ability to impose a clear structure on large codebases. However, modularizing a large codebase is not a trivial task. In this talk, we will discuss the difficulties encountered when implementing a real-life modular application and how to overcome them. We will also focus on the usage of build tools such as Gradle and Maven to compile, test, build and run modular applications. In addition, we will explore a series of plugins that automate tasks such as: - creating modular jars that target a Java release before 9 - using JavaFX in Java 11+ applications - creating custom runtime images - packaging native installers using the 'jpackage' tool introduced in Java 13 The presentation will include both talking and live coding."
  language: ""
  speakers: [serior]
-
  id: 527
  title: "When your boss decides to have an architecture team…"
  description: "If you work in a large company there is at least one architecture team in your organisation. Sometimes there are even multiple of them and they compete with each other. Probably you’ve never seen any of the team members in real life. Thankfully we all know that the time of the Ivory Towers has passed. But we still make the same mistakes. As the company grows, the complexity becomes unmanageable so CTO decides to copy the well known pattern and creates the architecture team. But nobody knows what exactly should they do. This talk is a survival guide if: * You are a developer and you must cope with a newly designated architect. * You’ve just been informed that your role will be transformed to be an architect."
  language: ""
  speakers: [krzdeb]
-
  id: 528
  title: "Standard Web Payment APIs"
  description: "Essential part of modern UX is to get rid of forms, especially on mobile devices. Implementing the standard Web Payment APIs will not just improve the user experience, but increase the chance of maintaining your users. In this presentation we will discuss the basics of implementing the APIs, the available gateways, and show some demos and how they resonate in the era of PWA. We will also discuss the current limitations, and how the future will look like towards standardizing those APIs."
  language: ""
  speakers: [a.mabd]
-
  id: 529
  title: "Reactive message driven service 2 service communication with RSocket"
  description: "Highly distributed systems are often composed of multiple microservices built by different teams using a variety of technologies and programming languages. Usually, in order to deliver business value, these services need to exchange tons of data (messages), and ideally, they do so in a reactive way. Combining reactive programming model with message driven approach can be beneficial but also might require bi-directional communication which can not be implemented using HTTP protocol and its request/response model. In such case, one of the possible solutions is RSocket. It is a lightweight binary protocol which can work on top of TCP, WebSockets or Aeron and provides fully message driven interaction model, which cannot be found in HTTP. During this talk, Rafał will present how to build reactive, resilient, message driven system based on multiple microservices linked with RSocket and will show how such design might affects performance and latency of the solution."
  language: ""
  speakers: [rafkow]
-
  id: 530
  title: "Taming Code Quality in the Worst Langugage I Know: Bash"
  description: "I don't know any other languages with more pitfalls, perils and gotchas than Bash. Still, we use it in almost every larger project for deployment or maintenance scripts, because there is no better, more powerful and more universal choice on Unix platform. However, there is ridiculous amount of things that could go wrong if you don't have deep understanding of shell scripting. Your experience about typical issues with Java or other JVM languages is definitely not enough here. You need to deeply understand Linux ecosystem and its history in order to write correct script... or you don't? I will prove to you that Bash could be tamed and made easy if proper code quality standards and static analysis tools are applied and enforced in your delivery pipelines. I'll share my opinions and experiences from a large banking project and I'll tell you which tools and style guides we use."
  language: ""
  speakers: [mickor]
-
  id: 531
  title: "Non-zero sum game: a talk about diversity"
  description: "We won't talk about differences between microservices in distributed systems nor CPU architectures, approaches to coding or frameworks. We want to talk about the diversity among the most essential 'ingredient' of coding. We want to talk about us, software engineers.

When hearing about 'diversity in IT' some of us smile, while others frown. It might be something we expect from the company or we might perceive it as unnecessary actions aimed at imagined and nonexistent problems.

Asia (HR Business Partner) and Adam (developer) decided to tackle this problem together. Is there really a need to promote diversity? Why is it so controversial? What are the facts and myths concerning diversity? Come see our presentation to learn more.
"
  language: ""
  speakers: [joadeb, adadub]
-
  id: 532
  title: "Jazon - test assertions on JSONs have never been easier"
  description: "Have you ever written a test where you needed to someway assert on JSON payload? With the recent fashion of microservices and real-time data pipelines, most of us faced that challenge. It wasn’t that hard but it often turned into a miserable pile of duplicated code for more complex test suites. I always felt we can do it better, so I decided to create a new open-source library that makes this process a lot easier - Jazon. The presentation will show how to use the tool and its features.


Jazon was created during my work with Java microservices in Zendesk (previously Base). It is meant to help you ship your services faster and with more confidence. Regarding the features, it supports:
 - simple assertions on JSONs <br>
- assertions for unordered arrays (when order of items do not matter in your JSON response)<br>
 - handy user-defined assertions (most powerful productivity booster) e.g. with Spock you can write: ``` jazon(response).matches( [ id: ANYTHING, elements: { it.size() == 17 } ] ) ``` <br>
- optimised to minimise code duplication <br>
- optimised for best human-readable error message allowing for fast error tracing <br>
And - most importantly<br>
 - it is designed to be extensible and can easily support any JVM project - for teams using Java, Groovy, Scala, Kotlin. 
"
  language: ""
  speakers: [pawmik]
-
  id: 533
  title: "How to make technical decisions?"
  description: "Developer teams face the problem of making tons of technology choices at every phase of a project. The amount of new libraries, frameworks, and tools available today is outstanding. Most of us tend to use convenient technologies from our last assignment, typically where we have the most experience. But is it really the best choice? Aren’t we withholding ourselves from the opportunity to innovate? How to make a sound technology choice relatively fast? How do we involve the whole team in the process of decision making? In this talk, I’m going to drill down to every aspect of the decision-making process of technology choices. The audience will learn how to compare each technology in an objective manner. And I’ll offer some tips-and-tricks for involving all team members to leverage teamwork."
  language: ""
  speakers: [oremar]
-
  id: 534
  title: "How to save money on long-term support for Java 11?"
  description: "During my presentation I will clarify the situation with Oracle JDK and OpenJDK 11+ and compare available solutions to get (free) long-term support (LTS) for your (production) Java instances. Longer version. Java 11 LTS - besides new features - brought also confusion with the the licensing model. Among others, I will answer the following questions: Is Java still free? Will Java 11 get long-term support from Oracle? Will it be available for free? What is a difference between Oracle JDK 11 and OpenJDK 11? Do I need to upgrade my production to newer Java version every 6 months? What cost-free options do I have to use Java 11 with long-term support? Which option should be best for me (AdoptOpenJDK, Red Hat, Azul, Amazon, Liberica JDK, ...)? Or maybe, in the end, it is worth to pay some $$$ to have support from Oracle? Just as a pre-warn, please be aware that even the new releases of Oracle JDK 8 (yes 8!) starting with 8u211 (April 2019) are available under the new - non-free for commercial usage - license."
  language: ""
  speakers: [marzaj]
-
  id: 535
  title: "Fast & Functional"
  description: "In this talk we are going to create a functional and blazingly fast microservice. We will use functional programming abstractions to quickly mix & match different HTTP libraries, state implementations and concurrency configurations. Each step will be followed by a performance analysis using different tools from JVM toolbox. This talk is for you if you want to see how type classes, cats IO monad, async-profiler, flame graphs and wrk are used together to create microseconds-fast Scala service for YouTube videos statistics."
  language: ""
  speakers: [micpla]
-
  id: 536
  title: "Create your own Interpreter with a JIT in 1 hour"
  description: "During this talk I will describe how you can use Eclipse OMR technologies to easily create an Interpreter for a new or existing runtime and get a JIT for free! I will walk through the simple steps to create a small, efficient Interpreter and JIT using the new OMR InterpreterBuilder for any runtime. One of the major benefits is that once the Interpreter is written the same code is used to create a JIT for the runtime. This means there is only 1 place to modify code. Everyone understands the benefit of having a JIT so getting one for free is a huge advantage. By the end of the talk we will have successfully implemented a simple Interpreter and JIT using the InterpreterBuilder and compared the performance with an Interpreter written in C++. Runtime and language enthusiasts should definitely check out the OMR project to see how it can help. The OMR project is a set of open source C and C++ components that can be used to build robust language runtimes that support many different hardware and operating system platforms. One key feature of the OMR project is that it can be used to improve an existing runtime for languages with mature communities without forcing the communities to switch from their favourite runtime."
  language: ""
  speakers: [chagra]
-
  id: 538
  title: "Micronaut, Dragon-Slayer (Spring/boot) or just another framework"
  description: "In the Java world, Spring is a great beast, a Dragon, and with a good reason. Spring is a very powerful framework which does a lot for developers while giving them a lot of power. All this power, of course, doesn't come without its price. Most of the developers using Spring are either happy to pay this price or not aware of it at all. On the other hand, Micronaut comes with the promise of all the power of Spring, while not having any of the costs that Spring brings to the table. Let us look at it, how it compare and differ to Spring and if it lives up to its promises."
  language: ""
  speakers: [vladej]
-
  id: 539
  title: "Netty 5 - Lessons learned"
  description: "Netty is one of the most used network frameworks on the JVM (if not the most used) which provides its users not only with great flexibility but also with superb performance.
While Netty 4.x was a great success and is used literally everywhere in production it became clear over the “years” that a few design choices that where made did produce various limitations. As work has started on Netty 5, it’s time to fix these limitations and incorporate all the feedback we received from the community and core maintainers. 

This talk will focus on multiple core changes that are scheduled for netty 5 by explaining what “real-world issues” these solve and how these changes will help to operate Netty in high-scale production environments. Also it will give a brief overview of the general planed timeline of Netty 5 and roadmap."
  language: ""
  speakers: [normau]
-
  id: 540
  title: "Why you (don't) want to write you own memory buffer recycler?"
  description: "Why JVM allocates so much memory every time a request is handled by our application? As our heaps grow, you wonder what would it take to have it under control. Life can become much easier if we ensure that memory is allocated only once, right? Let's have a look at the challenges of memory buffer recycling using object pooling."
  language: ""
  speakers: [raffol]
-
  id: 541
  title: "Recycling examples"
  description: "Have you ever wondered how you can recycle your Gherkin examples and verify different parts of your application using the same example? This is a two two part problem: 
<br>
* implement an adapter for each seam you want to connect through 
<br>
* use the adapter when running Cucumber Thomas will show an example using Cucumber-JVM where he recycles examples by varying adapters. 

The result is fast feedback if the business logic is broken. Slower but accurate feedback if the delivery mechanism is broken. At the end of the day, you can be certain that you won't let your users down when they get to use the application. There will be code implemented and executed on stage that will show one way of recycling examples."
  language: ""
  speakers: [thosun]
-
  id: 542
  title: "Developer's guide to selling your soul"
  description: "In almost every developer's life there comes a time at which he/she has to choose. To go into management, or to stay in development. Now, if you're a 'my concept of fun is reading about monads and category theory' kind of developer, this will probably feel like you're selling your soul to 'The Man'. But here's the hard truth. No matter what you want to achieve in your professional life, chances are you'll need other people to do that. So doing at least some sort of management is not an option, it's a necessity. In this talk I'll tell you my experience of going through this transformation. I'll try to sum up my ups and downs into a quick and easy cookbook you can use in your day-to-day operations. So that you still have time to do what you love the most, develop!"
  language: ""
  speakers: [hrvcrn]
-
  id: 543
  title: "Kotlin is for hipsters"
  description: "Most developers like using cool, shiny, new technologies. But at the same time, we embrace the 'known' older technology stacks when creating software which will run in production, and for good reason! At the Port of Rotterdam we decided to take a leap of faith and embrace our inner hipsters. Unhindered with any prior experience, we started developing our applications using Kotlin. In this talk, we will share our experiences with developing in Kotlin for a few months. Hopefully, we will enthuse you to make the same decision!"
  language: ""
  speakers: [jorvan, riclip]
-
  id: 544
  title: "Data Streaming: Which horse to bet on?"
  description: "Data streaming has been mainstream in the development world for a few years already, bringing us lots of mature frameworks, like: Spark Streaming, Flink, Akka Streams or Kafka Streams. This abundance is always welcome, but can also be confusing, when having to pick one with lowest latency, highest throughput or best CPU / memory utilization. The aim of this talk is to provide a reliable response to those dilemmas as much as it is possible."
  language: ""
  speakers: [kamowc]
-
  id: 546
  title: "Superpowers of Kotlin Delegation"
  description: "Property delegation is pretty new feature in the programming world and most developers use only small amount of possibilities it provides. On the other hand, class delegation is known for decades and it was promoted by big authorities. All it needed was language support, which was introduced in Kotlin. On this session, we are going to dive into possibilities that Kotlin delegation gives. Let's discover this features and understand its superpowers"
  language: ""
  speakers: [marmos]
-
  id: 547
  title: "java.util.concurrent for Distributed Coordination"
  description: "The evolution of distributed coordination tools shows that high-level APIs ease implementation of coordination tasks, such as leader election, locking, synchronized actions. For instance, the Chubby paper highlights familiarity of lock-based interfaces. Similarly, Apache Curator hides complexity of ZooKeeper recipes behind Java APIs, while etcd and Consul implement concurrency primitives on their own. A different path in this journey would be extending the long-lasting java.util.concurrent APIs for distributed coordination. Hazelcast follows this path by offering distributed implementations of Java locks, semaphores, and other concurrency primitives. Unfortunately, these implementations were suffering from consistency issues. In this talk, we will explore a brand new implementation of java.util.concurrent APIs on top of the Raft consensus algorithm. We will walk through code samples to see how Java locks, semaphores, etc. can be used in distributed environments that involve partial failures."
  language: ""
  speakers: [enskah]
-
  id: 548
  title: "From notebooks to production - bringing devops to scientists"
  description: "Delivering a data science to production currently looks something like this: Clara your brilliant data scientist creates a model in her notebook that can have a huge impact on the companies revenue after working on it isolated for a few weeks a pickle file is born and Clara has to find a way to expose to users, with any luck she will grab the correct product manager that will be able to maybe prioritize it during the next sprint, once the engineering team gets to it the model is already stale and the process resets. This familiar scenario wastes resources from multiple departments and introduces overhead instead of value. In this talk I want to show how to remove a major bottleneck between data science and production. Assaf a generic model serving framework and a few devops methods you can free your scientist to do science and move quickly while decoupling them from engineering efforts, allowing engineers to deliver value, stop doing repetitive work and focus on what they are best at. Assaf abstracts away caching and networking allowing scientists to use it as a library in their favorite language and focus on what's important to them. Assaf relies on persistent event streams to communicate between users and services and come with built-in metrics collection and tracing so deployed models are resilient and can be monitored efficiently, this highlights hotspots and triggers a darwinian process making teams focus on what's they know is important and reduce guessing to a minimum."
  language: ""
  speakers: [raaros]
-
  id: 549
  title: "How shit works: TCP/IP"
  description: "From the top of the stack, networks are remarkably simple to use. Just throw in a couple machines, some cables, a network switch and HTTP server, stir gently and season to taste, right? Your go-to high level protocol (HTTP anyone?) builds on a hierarchy of seemingly simple abstractions that hide immense complexity, and these abstractions inevitably leak. In the fourth part of this series we'll take a closer look at everyone's favorite protocol TCP/IP, enumerate the challenges it faces and see how it aims to solve them. With luck, you'll come away understanding enough so that next time you run into Connection Reset by Peer issues or SO_LINGER you'll have some idea what you're up against."
  language: ""
  speakers: [tomgab]
-
  id: 550
  title: "TestContainers + JUnit5 = elegant end-to-end tests for microservices"
  description: "Developing microservices is an exciting process but could be challenging at the same time. Sooner or later a developer needs to deploy his changes into production. With microservices it is not enough any more to check whether all unit and/or integration tests for a single service have passed. What developers badly need is an ability to check interactions of their release candidate against other services of stable versions. It could be done by adopting a canary deployment technique. In the worst case just of a small portion of production traffic would be affected. Another commonly used technique is to deploy the release candidate to some hardware QA environment. The drawback of this approach is that QA environment tends to turn into a mess of unstable services from various teams. This talk suggests to perform automatic testing of the release candidate against other real services started in Docker. TestContainers library facilitates simple start up of services and their dependencies, i.e. (No)SQL databases in containers. The lib has a list of valuable features which significantly simplify a developer’s life. - Docker environment autodiscovery - mapping to random unique host ports - easy Docker network configuration - waiting strategies for a ready status - containers cleanup guarantees - exposure of host ports to Docker networks JUnit 5 extensions are a flexible way to configure granularity of tests. For each service in a platform annotation and extension are implemented. Under the hood an extension would start and configure a corresponding service in Docker container. First service to be started is a service registry (Consul, Spring Cloud Eureka) so all business capable services could register and autodiscover their neighbors. Eventually automatic test invokes public HTTP endpoints of a service and verifies responses. Those response payloads might be contributed by multiple services of the platform even several hops away. In the demo part a simplified version of a SMS platform is emulated. Apart from Spring Cloud Eureka there are 3 more business services built on Spring Boot. One of them is Acceptor which accepts clients requests, consults Billing on a decision whether to proceed with a request or not. Eventually Sender does an actual submit of an SMS to a mobile operator. Later the operator pushes a delivery report to Sender’s endpoint which should be matched to the submitted message and forwarded to Acceptor and then to client. Final price of the message in Billing might be adjusted depending on a status in the delivery report. If those several business flows keep working with a release of any services it is already a lot for the business. To emulate operator and client MockServer is used."
  language: ""
  speakers: [serego]
-
  id: 551
  title: "Monolith? Microservices? Is this important?"
  description: "TBD"
  language: ""
  speakers: [barkuc]
-
  id: 552
  title: "Architecture: The hard parts"
  description: "Architects often look harried and worried because they have no clean, easy decisions: everything is an awful tradeoff. Architecture has lots of difficult problems, which this talk highlights by investigating what makes architecture so hard. At the of core many architectural problems: getting good granularity, which we illustrate via event-driven architectures, teams, components, architectural quantum, and a host of other examples. We also illustrate reuse at the application, department, and enterprise level, and why reuse seems simple but isn’t. We also discuss difficult decisions, how to do tradeoff analysis, tools like MECE lists, and how to decouple services to achieve proper granularity. Architecture is full of hard parts; by tracing the common reasons and applying lessons more universally, we can make it softer."
  language: ""
  speakers: [neafor]
-
  id: 553
  title: "CharBusters - 10 Unicode Myths"
  description: "TBD"
  language: ""
  speakers: [tomnur]
-
  id: 554
  title: "Three Programming Disruptions"
  description: "As the pace of change accelerates, programmers are buffeted with new
technologies, and must choose which ones to focus on to stay on the leading
edge of the profession. Here are three technologies I've been studying that
will cause significant changes to the programming world. Each one represents a
different shift, and their disruptive effects will express themselves in
unique ways."
  language: ""
  speakers: [brueck]
-
  id: 555
  title: "Java 10/11 Memory Management and GC"
  description: "
One of the great advantages of the JRE is HotSpot which has evolved significantly since it's introduction in Java 1.2. The magic of the heuristics and garbage collection is great... until it isn't. At lower scale, the default configuration works just fine.   For those that are pushing the boundaries of scale it is invaluable to understand the underlying details of how memory is managed and how to influence desired results:  throughput vs latency.  

This session will look at the Java monitoring and management capabilities, which includes the ability to make VM argument changes on the fly. This session will dive into the different memory compartments and how they are used by the JVM. Final this session will explore the different GC options including G1 and how they affect response times and throughput. This session will include features introduced in Java 9 to make it more container aware."
  language: ""
  speakers: [kensip]
-
  id: 556
  title: "Production level Docker"
  description: "
There is no question that Docker has the attention of the majority of developers. It certainly makes isolating applications and their dependencies easy.  Less easy and obvious is how to manage these container in a production environment. This session will be lead by a speaker that has been running docker in production since pre-1.0 days and works with dozens of companies that do the same.

This session will walk through the basics of creating docker images including details of the Dockerfile.   We will discuss typical Datacenter deployments of docker running in Mesos, DC/OS and Kubernetes and how the docker image system works.   With that information we will then layout best practices for managing docker images.


This session will include limitations of different container runtimes and how processes running in containers are managed in production, along with common failure modes.
"
  language: ""
  speakers: [kensip]
-
  id: 557
  title: "Leveraging Emerging Technology to Simplify the Travel Experience"
  description: "Since the deregulation of the airline industry in 1979, the industry has changed in many ways. We have seen a wider choice in air travel, an exponential increase of airfares, the introduction of hub and spoke networks, the creation of global alliances, the introduction of low cost carriers with different economics from traditional network carriers, branded fares and new messaging standards for airlines to communicate with marketplaces. All of these transformations bring complexity which must be mastered to simplify the travel experience. This talk focuses on advances in emerging technology that can be harnessed to develop applications to simplify the travel experience."
  language: ""
  speakers: [benvin]
-
  id: 711
  title: "Lunch - room 7"
  description: "Vietnamese pork loin + grilled potatoes + salad"
  service: "true"
  language: ""
-
  id: 712
  title: "Lunch - room 5"
  description: "Chicken filet in paprika sauce + rice + salad"
  service: "true"
  language: ""
-
  id: 713
  title: "Lunch - room 3"
  description: "Vegies in delicate curry sauce on coconut milk + rice"
  service: "true"
  language: ""
-
  id: 721
  title: "Lunch - room 7"
  description: "Meat balls in tomato&basil sauce"
  service: "true"
  language: ""
-
  id: 722
  title: "Lunch - room 5"
  description: "Beef vindalloo gulash + wild rice + salad"
  service: "true"
  language: ""
-
  id: 723
  title: "Lunch - room 3"
  description: " Dumplings: russian and lentil + salad (vege)"
  service: "true"
  language: ""
-
  id: 901
  title: "Registration & breakfast"
  description: ""
  service: "true"
  language: ""
-
  id: 902
  title: "Breakfast"
  description: ""
  service: "true"
  language: ""
-
  id: 904
  title: "Break"
  description: "The best time to take coffee or juice"
  service: "true"
  language: ""
-
  id: 905
  title: "Coffee Break"
  description: "The best time to talk with speakers and attendees"
  service: "true"
  language: ""
-
  id: 906
  title: "Lunch Break"
  description: ""
  service: "true"
  language: ""
-
  id: 907
  title: "Keynote"
  description: ""
  service: "true"
  language: ""
-
  id: 908
  title: "Opening ceremony"
  description: ""
  service: "true"
  language: ""
-
  id: 909
  title: "Closing ceremony"
  description: ""
  service: "true"
  language: ""
-
  id: 910
  title: "TBA"
  description: "To Be Announced"
  service: "true"
  language: ""
-
  id: 911
  title: "Lighting talk TBA"
  description: "Lighting talk - To Be Announced"
  service: "true"
  language: ""
-
  id: 912
  title: "Topic tables"
  description: "Join other attendees and share ideas, talk about the recent challenges, or find solution for a problem. During this session you can connect with other like-minded people in a space designated for certain languages, technologies, and interests.
<br/>1. Suggest a topic
<br/>Look for large white sheets of paper, and tell everyone what is on your mind! You can also tweet using #topicforgeecon hashtag. Vote for topics (mark it with line/x/heart) and like tweets to show others you’re interested.
<br/>2. Choose a room and have fun
<br/>We will group similar topics and assign a room. Topics will be pinned before room entrance (list of topics and rooms will be also posted using attendees slack channel - slack.geecon.cz), so you will be able to join others also interested in eg. Kotlin, JVM tuning, Machine learning or testability."
  language: ""
-
  id: 913
  title: "Open Spaces"
  description: ""
  language: ""
-
  id: 990
  title: "Party"
  description: "Party time!"
  service: "true"
  language: ""
